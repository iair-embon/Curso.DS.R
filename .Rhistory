?theme()
prod(1:3)
1*2*3
prod(1:5)
1*2*3*4*5
load("D:/Windows/Descargas/Git_Metacog_Personalidad/Pubilico/Metacognition.PersonalityTraits/git/Data/df_total_filtered.Rda")
root <- rprojroot::is_rstudio_project
basename(getwd())
# load the function to get the df list
source(root$find_file("Entrega_Final/df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("Entrega_Final//df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("//Entrega_Final//df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("/Entrega_Final/df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("./Entrega_Final/df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("\Entrega_Final\df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("Entrega_Final\df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("Entrega_Final\\df_total_filtered.Rda"))
# voy a la carpeta del proyecto
root <- rprojroot::is_rstudio_project
basename(getwd())
root
root$subdir
source(root$find_file("Entrega_Final\df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("Entrega_Final\\df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("Entrega_Final/df_total_filtered.Rda"))
load("~/Documents/Investigaci贸n/Curso.DS.R/Entrega_Final/df_total_filtered.Rda")
# load the function to get the df list
source(root$find_file("Entrega_Final/df_total_filtered.Rda"))
# voy a la carpeta del proyecto
root <- rprojroot::is_rstudio_project
basename(getwd())
# load the function to get the df list
source(root$find_file("Entrega_Final/df_total_filtered.Rda"))
install.packages(c("AsioHeaders", "broom", "broom.helpers", "bslib", "car", "classInt", "DBI", "dbplyr", "devtools", "downlit", "e1071", "emmeans", "estimability", "flexmix", "fontawesome", "forecast", "future", "generics", "ggdist", "gld", "globals", "gtools", "gtsummary", "hardhat", "htmltools", "igraph", "insight", "lme4", "MCMCglmm", "parallelly", "performance", "posterior", "proxy", "quantreg", "RcppArmadillo", "RCurl", "recipes", "roxygen2", "rsample", "s2", "sandwich", "sass", "shiny", "stringi", "tidyverse", "timeDate", "tinytex"))
install.packages(c("AsioHeaders", "broom", "broom.helpers", "bslib", "car", "classInt", "DBI", "dbplyr", "devtools", "downlit", "e1071", "emmeans", "estimability", "flexmix", "fontawesome", "forecast", "future", "generics", "ggdist", "gld", "globals", "gtools", "gtsummary", "hardhat", "htmltools", "igraph", "insight", "lme4", "MCMCglmm", "parallelly", "performance", "posterior", "proxy", "quantreg", "RcppArmadillo", "RCurl", "recipes", "roxygen2", "rsample", "s2", "sandwich", "sass", "shiny", "stringi", "tidyverse", "timeDate", "tinytex"))
# voy a la carpeta del proyecto
root <- rprojroot::is_rstudio_project
basename(getwd())
# load the function to get the df list
source(root$find_file("Entrega_Final/df_total_filtered.Rda"))
# voy a la carpeta del proyecto
root <- rprojroot::is_rstudio_project
basename(getwd())
# load the function to get the df list
source(root$find_file("Entrega_Final/df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("/df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("df_total_filtered.Rda"))
# load the function to get the df list
source(root$find_file("Entrega_Final/df_total_filtered.Rda"))
load("D:/Windows/Descargas/Git_Metacog_Personalidad/Pubilico/Metacognition.PersonalityTraits/git/Data/df_total_filtered.Rda")
load("~/Documents/Investigaci贸n/Curso.DS.R/Entrega_Final/df_total_filtered.Rda")
> load("~/Documents/Investigaci贸n/Curso.DS.R/Entrega_Final/df_total_filtered.Rda")
load("~/Documents/Investigaci贸n/Curso.DS.R/Entrega_Final/df_total_filtered.Rda")
str(df_total)
density(df_total$mc)
plot(density(df_total$mc))
library(dplyr)
str(df_total)
d <- df_total %>%
select(!c(RelyOn,
Problems,
ConfKey1,
ConfKey2,
ConfKey3,
ConfKey4,
discrimination_is_correct,
confidence_key,
trials,
PointDifference,
ReacTime_DiscTask
ReacTime_ConfTask)) %>%
d <- df_total %>%
select(!c(RelyOn,
Problems,
ConfKey1,
ConfKey2,
ConfKey3,
ConfKey4,
discrimination_is_correct,
confidence_key,
trials,
PointDifference,
ReacTime_DiscTask,
ReacTime_ConfTask)) %>%
distinct(Participant,.keep_all = TRUE)
plot(density(d$mc))
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
arrange(ConfMean)
head(d.sorted)
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
arrange(ConfMean) %>%
mutate(nr = row_number()) %>%
pivot_longer(!c(Participant, nr))
library(dplyr)
library(tidyverse)
=
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
arrange(ConfMean) %>%
mutate(nr = row_number()) %>%
pivot_longer(!c(Participant, nr))
str(d.sorted)
ggplot(d.sorted, aes(x= unique(nr) ,
y=value,color=name)) +
geom_point(size = 2) +
scale_color_manual(values = c("black","grey"),labels = c("Confidence Key", "Performance"))+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(d.sorted, aes(x= unique(nr),y=value,color=name)) +
geom_point(size = 2)
unique(nr)
ggplot(d.sorted, aes(x= unique(nr), y=value,color=name)) +
geom_point(size = 2)
unique(d.sorted$nr)
ggplot(d.sorted, aes(x= unique(nr), y=value,color=name)) +
geom_point(size = 2)
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
mutate(ConfMean = (ConfMean-1)/3)
head( <- d %>%
select(ConfMean,PC,Participant) %>%
mutate(ConfMean = (ConfMean-1)/3) )
head(d.sorted)
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
mutate(ConfMean = (ConfMean-1)/3) %>%
arrange(ConfMean) %>%
mutate(nr = row_number()) %>%
pivot_longer(!c(Participant, nr))
ggplot(d.sorted, aes(x= unique(nr), y=value ,color=name)) +
geom_point(size = 2) +
scale_color_manual(values = c("black","grey"),labels = c("Confidence Key", "Performance"))+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(d.sorted, aes(x= unique(nr), y=value )) +
geom_point(size = 2) +
scale_color_manual(values = c("black","grey"),labels = c("Confidence Key", "Performance"))+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
# normalizo el promedio de confianza por sujeto para que este en una escala similar a la del desempeno
mutate(ConfMean = (ConfMean-1)/3) %>%
arrange(ConfMean)
head(d.sorted)
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
# normalizo el promedio de confianza por sujeto para que este en una escala similar a la del desempeno
mutate(ConfMean = (ConfMean-1)/3) %>%
arrange(ConfMean) %>%
mutate(nr = row_number())
head(d.sorted)
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=PC), size = 2, color = "grey")
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=PC), size = 2, color = "grey")+
scale_color_manual(values = c("black","grey"),labels = c("Confidence Key", "Performance"))+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2) +
geom_point(aes(y=PC), size = 2)+
scale_color_manual(values = c("black","grey"),labels = c("Confidence Key", "Performance"))+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=PC), size = 2, color = "grey")+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
lala <- C(0,1,0,1,0,0,0,0,0,0)
lala <- c(0,1,0,1,0,0,0,0,0,0)
length(lala)
sum(lala)/ length(lala)
sum(d$ConfMean) / length(d$ConfMean)
d %>%
filter(ConfMean >= 0.72)
d %>%
filter(ConfMean >= 0.72) %>%
nrow
d %>%
filter(ConfMean >= 0.72) %>%
nrow ()
d %>%
nrow(filter(ConfMean >= 0.72)) %>%
nrow ()
d %>%
nrow(filter(ConfMean >= 0.72))
d %>%
filter(ConfMean >= 0.72)
d.sorted %>%
filter(ConfMean >= 0.72) %>%
nrow()
d.sorted %>%
filter(ConfMean < 0.72) %>%
nrow()
d.sorted$ConfMean/ 4
(d.sorted$ConfMean-1)/ 4
(d$ConfMean-1)/ 4
sort((d$ConfMean-1)/ 4)
sort((d$ConfMean)/ 4)
sum(sort((d$ConfMean)/ 4) ) > 0.72
sum(sort((d$ConfMean)/ 4) > 0.72)
sum(sort((d$ConfMean)/ 4) < 0.72)
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
# normalizo el promedio de confianza por sujeto para que este en una escala similar a la del desempeno
mutate(ConfMean = ConfMean/4) %>%
arrange(ConfMean) %>%
mutate(nr = row_number())
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=PC), size = 2, color = "grey")+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
d.sorted %>%
filter(ConfMean >= 0.72) %>%
nrow()
d.sorted %>%
filter(ConfMean < 0.72) %>%
nrow()
d.sorted <- d %>%
select(ConfMean,PC,Participant, mc) %>%
# normalizo el promedio de confianza por sujeto para que este en una escala similar a la del desempeno
mutate(ConfMean = ConfMean/4) %>%
arrange(ConfMean) %>%
mutate(nr = row_number())
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=mc), size = 2, color = "grey")+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
# normalizo el promedio de confianza por sujeto para que este en una escala similar a la del desempeno
mutate(ConfMean = ConfMean/4) %>%
arrange(ConfMean) %>%
mutate(nr = row_number())
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=PC), size = 2, color = "grey")+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
# normalizo el promedio de confianza por sujeto para que este en una escala similar a la del desempeno
mutate(ConfMean = ConfMean/4, nr = row_number()) %>%
arrange(ConfMean)
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=PC), size = 2, color = "grey")+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
d.sorted <- d %>%
select(ConfMean,PC,Participant) %>%
# normalizo el promedio de confianza por sujeto para que este en una escala similar a la del desempeno
mutate(ConfMean = ConfMean/4, nr = row_number()) %>%
arrange(ConfMean) %>%
mutate(nr = row_number())
ggplot(d.sorted, aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=PC), size = 2, color = "grey")+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
d.sorted %>%
filter(ConfMean >= 0.72) %>%
nrow()
d.sorted %>%
filter(ConfMean < 0.72) %>%
nrow()
d %>%
select(ConfMean,PC,Participant) %>%
# normalizo el promedio de confianza por sujeto para que este en una escala similar a la del desempeno
mutate(ConfMean = ConfMean/4, nr = row_number()) %>%
arrange(ConfMean) %>%
mutate(nr = row_number()) %>%
ggplot(aes(x= nr)) +
geom_point(aes(y=ConfMean), size = 2, color = "black") +
geom_point(aes(y=PC), size = 2, color = "grey")+
scale_x_continuous(expand = expansion(mult = c(0.01, 0.01))) +
scale_y_continuous(expand = expansion(mult = c(0.01, 0.1))) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.margin = margin(1, 1,1, 1, "cm"),
legend.text =  element_text(size = 25),
legend.position = c(0.7, 0.2),
legend.background = element_blank(),
legend.key = element_blank(),
legend.title = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 30),
axis.text.y = element_text(size = 30),
axis.title.x = element_blank(),
axis.title.y = element_blank())
d <- d %>%
mutate(ConfMean.norm = ConfMean/4,
overconfidence = ifelse(ConfMean.norm > 0.72, 1, 0))
hist(d$overconfidence)
# veo cuantos hay
d %>%
summarise(n= sum(overconfidence))
224-81
model <- glm(overconfidence ~ d$DomainAntagonism +
d$DomainDetachment +
d$DomainDisinhibition +
d$DomainNegativeAffect +
d$DomainPsychoticism,
family=binomial(link='logit'),
data=d)
summary(model)
table(d$age)
table(d$gender)
model <- glm(overconfidence ~ DomainAntagonism +
DomainDetachment +
DomainDisinhibition +
DomainNegativeAffect +
DomainPsychoticism,
family=binomial(link='logit'),
data=d)
summary(model)
model2 <- glm(overconfidence ~ DomainAntagonism +
DomainDetachment +
DomainDisinhibition +
DomainNegativeAffect +
DomainPsychoticism +
gender +
age,
family=binomial(link='logit'),
data=d)
summary(model2)
